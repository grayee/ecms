https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql

注意：
    在使用这套表结构之前要注意的是，对于MySQL来说，默认建表语句中主键是varchar(255)类型，在mysql中执行会报错，
    原因是mysql对varchar主键长度有限制。所以这里改成128即可。其次，语句中会有某些字段为LONGVARBINARY类型，它对应mysql的blob类型，
    也需要修改一下。

表结构说明见： http://andaily.com/spring-oauth-server/db_table_description.html

OAuth 2.0 主要有4类角色：

  resource owner：资源所有者，指终端的“用户”（user）
  resource server：资源服务器，即服务提供商存放受保护资源。访问这些资源，需要获得访问令牌（access token）。它与认证服务器，
                   可以是同一台服务器，也可以是不同的服务器。
                   如果，我们访问新浪博客网站，那么如果使用新浪博客的账号来登录新浪博客网站，那么新浪博客的资源和新浪博客的认证都是同一家，
                   可以认为是同一个服务器。如果，我们是新浪博客账号去登录了知乎，那么显然知乎的资源和新浪的认证不是一个服务器。
  client：客户端，代表向受保护资源进行资源请求的第三方应用程序。
  authorization server： 授权服务器， 在验证资源所有者并获得授权成功后，将发放访问令牌给客户端。

其中，Oauth 2.0 Provider：包括Authorization Server和Resource Server。

OAuth 2.0 的认证流程:

 +--------+                               +---------------+
 |        |--(A)- Authorization Request ->|   Resource    |
 |        |                               |     Owner     |
 |        |<-(B)-- Authorization Grant ---|               |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(C)-- Authorization Grant -->| Authorization |
 | Client |                               |     Server    |
 |        |<-(D)----- Access Token -------|               |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(E)----- Access Token ------>|    Resource   |
 |        |                               |     Server    |
 |        |<-(F)--- Protected Resource ---|               |
 +--------+                               +---------------+

（A）用户打开客户端以后，客户端请求资源所有者（用户）的授权。
（B）用户同意给予客户端授权。
（C）客户端使用上一步获得的授权，向认证服务器申请访问令牌。
（D）认证服务器对客户端进行认证以后，确认无误，同意发放访问令牌。
（E）客户端使用访问令牌，向资源服务器申请获取资源。
（F）资源服务器确认令牌无误，同意向客户端开放资源。

其中，用户授权有四种模式：

  授权码模式（authorization code）--即先登录获取code,再获取token
  简化模式（implicit）— 简化模式(在redirect_uri 的Hash传递token; Auth客户端运行在浏览器中,如JS,Flash)
  密码模式（resource owner password credentials）--将用户名,密码传过去,直接获取token
  客户端模式（client credentials）— 客户端模式(无用户,用户向客户端注册,然后客户端以自己的名义向’服务端’获取资源)

介绍：https://www.oschina.net/translate/spring-security-oauth-docs-oauth2
官方原文：http://projects.spring.io/spring-security-oauth/docs/oauth2.html

OAuth 2.0 一般分为两个部分，一部分是提供方[通常指服务提供方]，另一部分则是客户端

OAuth 2.0 提供方
    OAuth 2.0 提供方通过某种机制来提供受 OAuth 2.0 保护的资源。其配置涉到确立 OAuth 2.0 客户端能做什么，是能独立访问受保护的资源，
还是保护用户的利益。提供方通过管理和验证 OAuth 2.0 令牌达到目的，令牌就是用来访问受保护资源的。在某些情况下，提供方还必须为用户
提供一个接口用于确认授权客户端访问受保护的资源（比如，确认页面）。

OAuth 2.0 提供方实现
   OAuth 2.0 的提供方实际涵盖两个角色，即认证服务 (Authorization Service) 和资源服务 (Resource Service)，有时候它们会在同一个
应用程序中实现。使用 Spring Security OAuth 的时候你可以选择把把它们分别放在两个应用程序中，也可以选择建立使用同一个认证服务的
多个资源服务。对令牌的请求由 Spring MVC 控制器终端进行处理，而标准的 Spring security 请求过滤器会处理对受保护资源的访问。

Spring以 Security 过滤器链需要以下各端来实现 OAuth 2.0 认证服务(Authorization Server)：

AuthorizationEndpoint 服务于认证请求。默认 URL： /oauth/authorize。
>>/oauth/token?grant_type=password #请求授权token
>>/oauth/token?grant_type=refresh_token #刷新token

TokenEndpoint 服务于访问令牌的请求。默认 URL： /oauth/token。

CheckTokenEndpoint 校验token 。默认 URL: /oauth/check_token

WhitelabelApprovalEndpoint 默认 URL: /oauth/confirm_access

一般情况下，创建两个配置类，一个继承AuthorizationServerConfigurerAdapter，一个继承WebSecurityConfigurerAdapter，
再去复写里面的方法。

/oauth/authorize：验证

/oauth/token：获取token

/oauth/confirm_access：用户授权

/oauth/error：认证失败

/oauth/check_token：资源服务器用来校验token

/oauth/token_key：如果jwt模式则可以用此来从认证服务器获取公钥

以上这些endpoint都在源码里的endpoint包里面。



下面的过滤器用于实现 OAuth 2.0 资源服务(Resource Server)：
OAuth2AuthenticationProcessingFilter: 给带有访问令牌的请求加载认证。


#TokenGranter#
>>1.ResourceOwnerPasswordTokenGranter ==> password密码模式
>>2.AuthorizationCodeTokenGranter ==> authorization_code授权码模式
>>3.ClientCredentialsTokenGranter ==> client_credentials客户端模式
>>4.ImplicitTokenGranter ==> implicit简化模式
>>5.RefreshTokenGranter ==>refresh_token 刷新token专用

>>CompositeTokenGranter==>组合TokenGranter : List<TokenGranter>，对应上述五种GrantType的实际授权实现


#AuthenticationManager#
>>ProviderManager -> AuthenticationProvider -> List<AuthenticationProvider>
>>OAuth2AuthenticationManager

#TokenExtractor#
>>BearerTokenExtractor : 用于分离出请求中包含的token
>>>1 在Header中携带
   http://localhost:8080/order/1
   Header：
   Authentication：Bearer f732723d-af7f-41bb-bd06-2636ab2be135

   2 拼接在url中作为requestParam
   http://localhost:8080/order/1?access_token=f732723d-af7f-41bb-bd06-2636ab2be135

   3 在form表单中携带
   http://localhost:8080/order/1
   form param：
   access_token=f732723d-af7f-41bb-bd06-2636ab2be135

#BasicAuthenticationEntryPoint#
>>>ResourceServerSecurityConfigurer -> ExceptionHandlingConfigurer -> ExceptionTranslationFilter
>>>>AuthenticationEntryPoint -> DelegatingAuthenticationEntryPoint -> BasicAuthenticationEntryPoint
>>>>AccessDeniedHandler 非匿名，非记住我时触发;否则触发BasicAuthenticationEntryPoint

通过authenticationEntryPoint.commence()调用端点异常处理器doHandle 方法
OAuth2AuthenticationEntryPoint -> AbstractOAuth2SecurityExceptionHandler -> WebResponseExceptionTranslator ->
OAuth2ExceptionRenderer -> DefaultOAuth2ExceptionRenderer -> OAuth2Exception




#Security 过滤器按顺序#
1.SecurityContextPersistenceFilter：与SecurityContext安全上下文信息有关
2.HeaderWriterFilter：给http响应添加一些Header
3.CsrfFilter：防止csrf攻击，默认开启
4.LogoutFilter：处理注销的过滤器
5.UsernamePasswordAuthenticationFilter：表单认证过滤器
6.RequestCacheAwareFilter：缓存request请求
7.SecurityContextHolderAwareRequestFilter：此过滤器对ServletRequest进行了一次包装，使得request具有更加丰富的API
8.AnonymousAuthenticationFilter：匿名身份过滤器
9.SessionManagementFilter：session相关的过滤器，常用来防止session-fixation protection attack，以及限制同一用户开启多个会话的数量
10.ExceptionTranslationFilter：异常处理过滤器
11.FilterSecurityInterceptor：web应用安全的关键Filter


使用token的方式也有两种：

（1）Bearer Token（https传输方式保证传输过程的安全）:主流

（2）Mac（http+sign）

Bearer Token (RFC 6750) 用于OAuth 2.0授权访问资源，任何Bearer持有者都可以无差别地用它来访问相关的资源，而无需证明持有加密key。
一个Bearer代表授权范围、有效期，以及其他授权事项；一个Bearer在存储和传输过程中应当防止泄露，需实现Transport Layer Security (TLS)；
一个Bearer有效期不能过长，过期后可用Refresh Token申请更新。

 资源请求

Bearer实现资源请求有三种方式：Authorization Header、Form-Encoded Body Parameter、URI Query Parameter，这三种方式优先级依次递减

Authorization Header：该头部定义与Basic方案类似
GET /resource HTTP/1.1
Host: server.example.com
Authorization: Bearer mF_9.B5f-4.1JqM

二. WWW-Authenticate头

　　在客户端未发送有效Bearer的情况下，即错误发生时，资源服务器须发送WWW-Authenticate头，下为示例：

HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example", error="invalid_token", error_description="The access token expired"


#oauth client config 这个config主要是配置3个#
>>OAuth2RestTemplate(获取token)
>>ResourceServerTokenServices(校验token)
>>OAuth2ClientAuthenticationProcessingFilter(拦截redirectUri,根据authentication code获取token，依赖前面两个对象)


前后端分离，登录页面放在前端时登录的问题

>>授权模式使用password的方式

>>使用post请求访问http://localhost:20000/auth/oauth/token
>>在请求的headers中新增一个header：key=Authorization，value=Basic Y2xpZW50OnNlY3JldA==
>>（Y2xpZW50OnNlY3JldA==为64编码，格式：client:secret）
>>在form-data中传递参数：username（用户账号）、password（用户密码）、grant_type（固定值：password）、scope（作用域）


WebSecurityConfigurerAdapter与ResourceServerConfigurerAdapter

WebSecurityConfigurerAdapter(@Order(100))的拦截要优先于ResourceServerConfigurerAdapter(-1)

二者关系
WebSecurityConfigurerAdapter用于保护oauth相关的endpoints，同时主要作用于用户的登录(form login,Basic auth)
ResourceServerConfigurerAdapter用于保护oauth要开放的资源，同时主要作用于client端以及token的认证(Bearer auth)
因此二者是分工协作的
在WebSecurityConfigurerAdapter不拦截oauth要开放的资源
    <code>
    @Override
    public void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();
        http.requestMatchers().antMatchers("/oauth/**")
                .and()
                .authorizeRequests()
                .antMatchers("/oauth/**").authenticated();
    }
    </code>
在ResourceServerConfigurerAdapter配置需要token验证的资源
    <code>
    @Override
    public void configure(HttpSecurity http) throws Exception {
        http.requestMatchers().antMatchers("/api/**")
                .and()
                .authorizeRequests()
                .antMatchers("/api/**").authenticated();
    }
     </code>